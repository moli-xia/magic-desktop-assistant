import tkinter as tk
from tkinter import messagebox, filedialog
import ttkbootstrap as ttk
from ttkbootstrap.constants import *
import requests
import ctypes
import os
import sys
import threading
import random
from PIL import Image, ImageTk
import time
import pystray
import subprocess
import io
import json
import base64
import tempfile
from datetime import datetime
from daily_news import DailyNewsManager, DailyNewsWindow
from integrated_features import IntegratedFeaturesManager, IntegratedFeaturesWindow
from alapi_services import ALAPIManager, ALAPIWindow
from calendar_reminder import CalendarReminderManager, CalendarReminderWindow
from reminder_notification import show_reminder_notification

# --- Single Instance Check ---
def check_single_instance():
    """检查是否已有实例在运行（Windows使用互斥量，其他平台轻量跳过以保证可打包）"""
    try:
        if sys.platform.startswith('win'):
            import ctypes
            from ctypes import wintypes
            mutex_name = "Global\\WallpaperDownloader_SingleInstance_Mutex"
            kernel32 = ctypes.windll.kernel32
            mutex = kernel32.CreateMutexW(None, True, mutex_name)
            if not mutex:
                print("无法创建互斥锁")
                return None
            last_error = kernel32.GetLastError()
            if last_error == 183:  # ERROR_ALREADY_EXISTS
                try:
                    user32 = ctypes.windll.user32
                    def enum_windows_proc(hwnd, lParam):
                        length = user32.GetWindowTextLengthW(hwnd)
                        if length > 0:
                            buffer = ctypes.create_unicode_buffer(length + 1)
                            user32.GetWindowTextW(hwnd, buffer, length + 1)
                            window_title = buffer.value
                            if "魔力桌面助手" in window_title:
                                user32.ShowWindow(hwnd, 9)
                                user32.SetForegroundWindow(hwnd)
                                return False
                        return True
                    EnumWindowsProc = ctypes.WINFUNCTYPE(ctypes.c_bool, wintypes.HWND, wintypes.LPARAM)
                    user32.EnumWindows(EnumWindowsProc(enum_windows_proc), 0)
                except Exception as e:
                    print(f"激活已运行实例失败: {e}")
                try:
                    show_center_messagebox("提示", "魔力桌面助手已在运行中！\n\n如果看不到窗口，请检查系统托盘。")
                except Exception:
                    print("魔力桌面助手已在运行中！")
                sys.exit(0)
            return mutex
        else:
            # 非Windows平台：避免阻断运行，仅创建临时锁文件（不强制退出）
            lock_path = os.path.join(tempfile.gettempdir(), 'wallpaper_downloader.lock')
            if not os.path.exists(lock_path):
                with open(lock_path, 'w') as f:
                    f.write(str(os.getpid()))
            return None
    except Exception as e:
        print(f"单实例检查失败: {e}")
        return None

# 在程序开始时检查单实例
app_mutex = check_single_instance()

def show_center_messagebox(title, message, msg_type="info"):
    """在桌面居中显示信息框"""
    try:
        import threading
        import time
        
        def create_message_window():
            # 创建消息窗口（不创建独立的根窗口）
            msg_window = tk.Toplevel()
            msg_window.title(title)
            msg_window.resizable(False, False)
            msg_window.overrideredirect(True)  # 移除窗口装饰，更像通知
            
            # 设置窗口大小
            window_width = 350
            window_height = 150
            
            # 获取屏幕尺寸
            screen_width = msg_window.winfo_screenwidth()
            screen_height = msg_window.winfo_screenheight()
            
            # 计算居中位置
            x = (screen_width - window_width) // 2
            y = (screen_height - window_height) // 2
            
            # 设置窗口位置和大小
            msg_window.geometry(f"{window_width}x{window_height}+{x}+{y}")
            
            # 确保窗口在最前面
            msg_window.attributes('-topmost', True)
            msg_window.attributes('-alpha', 0.95)  # 半透明效果
            
            # 强制更新窗口位置
            msg_window.update_idletasks()
            
            # 再次确保居中位置
            msg_window.geometry(f"{window_width}x{window_height}+{x}+{y}")
            
            # 根据消息类型设置颜色
            if msg_type == "warning":
                bg_color = "#fff3cd"
                border_color = "#ffeaa7"
            elif msg_type == "error":
                bg_color = "#f8d7da"
                border_color = "#fd79a8"
            elif msg_type == "question":
                bg_color = "#d1ecf1"
                border_color = "#74b9ff"
            else:  # info
                bg_color = "#d4edda"
                border_color = "#00b894"
            
            # 设置窗口样式
            msg_window.configure(bg=border_color)
            
            # 主框架
            main_frame = tk.Frame(msg_window, bg=bg_color, relief=tk.RAISED, bd=2)
            main_frame.pack(fill=tk.BOTH, expand=True, padx=3, pady=3)
            
            # 标题栏
            title_frame = tk.Frame(main_frame, bg=border_color, height=30)
            title_frame.pack(fill=tk.X)
            title_frame.pack_propagate(False)
            
            title_label = tk.Label(title_frame, text=title, bg=border_color, 
                                 fg="white", font=("Arial", 10, "bold"))
            title_label.pack(side=tk.LEFT, padx=8, pady=5)
            
            # 关闭按钮
            close_btn = tk.Label(title_frame, text="×", bg=border_color, 
                               fg="white", font=("Arial", 14, "bold"), cursor="hand2")
            close_btn.pack(side=tk.RIGHT, padx=8, pady=5)
            
            # 消息内容
            content_frame = tk.Frame(main_frame, bg=bg_color)
            content_frame.pack(fill=tk.BOTH, expand=True, padx=15, pady=10)
            
            msg_label = tk.Label(content_frame, text=message, bg=bg_color, 
                               font=("Arial", 10), wraplength=300, justify=tk.LEFT)
            msg_label.pack(expand=True)
            
            # 关闭窗口函数
            def close_window():
                try:
                    msg_window.destroy()
                except:
                    pass
            
            # 绑定关闭事件
            close_btn.bind("<Button-1>", lambda e: close_window())
            msg_window.bind("<Button-1>", lambda e: close_window())
            msg_window.protocol("WM_DELETE_WINDOW", close_window)
            
            # 自动关闭定时器
            msg_window.after(4000, close_window)  # 4秒后自动关闭
            
            # 显示窗口并确保居中位置
            msg_window.deiconify()
            msg_window.focus_force()
            msg_window.lift()
            
            # 最后一次确保位置正确
            msg_window.update()
            msg_window.geometry(f"{window_width}x{window_height}+{x}+{y}")
        
        # 在主线程中创建窗口
        create_message_window()
        
    except Exception as e:
        print(f"显示通知窗口失败: {e}")
        # 如果居中通知失败，使用标准消息框作为备选
        try:
            import tkinter.messagebox as mb
            if msg_type == "warning":
                mb.showwarning(title, message)
            elif msg_type == "error":
                mb.showerror(title, message)
            else:
                mb.showinfo(title, message)
        except:
            print(f"备选消息框也失败: {e}")

# --- Embedded Icon Data ---
ICON_DATA = base64.b64decode(
    b'iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJc0ZPSUh2eXAAAAAASAAAAA8AAAAIAACABAAAAA8A'
    b'AAABBAABAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
    b'AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAA'
    b'AIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/AAAAAAAAAIAAAAD/'
)

# --- Constants ---
APP_DATA_DIR = os.path.join(os.getenv('APPDATA'), 'WallpaperApp')
CONFIG_PATH = os.path.join(APP_DATA_DIR, 'config.json')
ICON_PATH = os.path.join(APP_DATA_DIR, 'icon.ico')
PICTURES_DIR = os.path.join(os.path.expanduser('~'), 'Pictures')
MAX_CACHE_SIZE = 50

# --- Helper for PyInstaller Bundling ---
def resource_path(relative_path):
    """ Get absolute path to resource, works for dev and for PyInstaller """
    try:
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")
    return os.path.join(base_path, relative_path)

class WallpaperApp:
    def __init__(self, root):
        self.root = root
        self.root.title("魔力桌面助手")
        
        # 设置窗口大小并居中显示（增加高度确保所有内容完整显示）
        window_width = 420
        window_height = 650  # 进一步增加高度确保日历提醒功能完整显示
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        x = (screen_width - window_width) // 2
        y = (screen_height - window_height) // 2
        self.root.geometry(f"{window_width}x{window_height}+{x}+{y}")
        
        # 设置窗口图标
        self.set_window_icon(self.root)

        os.makedirs(APP_DATA_DIR, exist_ok=True)
        
        # 自动屏保相关变量初始化（在load_config之前设置默认值）
        self.auto_screensaver_enabled = False
        self.idle_time_minutes = 5  # 默认5分钟无操作启动屏保
        self.last_activity_time = time.time()
        self.idle_check_timer = None
        self.screensaver_active = False
        
        # 屏保图片管理
        self.current_image_index = 0
        self.used_images = set()  # 记录已使用的图片
        
        self.load_config()  # 加载配置会覆盖上面的默认值
        self.create_default_icon_in_appdata()
        
        # 初始化UI
        self.setup_ui()
        
        # 绑定全局事件监听
        self.setup_activity_monitoring()
        
        # 启动时初始化屏保图片
        self.initialize_screensaver_images()
        
        # 初始化早报功能
        self.daily_news_manager = DailyNewsManager()
        self.daily_news_window = None
        self.news_timer = None
        
        # 初始化集成功能
        self.integrated_features_manager = IntegratedFeaturesManager()
        self.integrated_features_window = None
        
        # 初始化ALAPI服务
        self.alapi_manager = ALAPIManager()
        self.alapi_window = None
        self.selected_services = []
        
        # 初始化日历提醒功能
        self.calendar_reminder_manager = CalendarReminderManager(APP_DATA_DIR)
        self.calendar_reminder_window = None
        # 设置提醒通知回调
        self.calendar_reminder_manager.set_notification_callback(show_reminder_notification)
        
        # 统一信息推送去重标记（记录上次推送的小时和分钟）
        self.last_info_push_minute = None

    def initialize_screensaver_images(self):
        """启动时初始化屏保图片，确保至少有一张有效图片"""
        def download_first_image():
            try:
                # 加载现有图片并验证
                self.load_cached_images()
                
                # 如果没有有效图片，下载第一张
                if not self.screensaver_images:
                    print("屏保文件夹为空，开始下载第一张图片...")
                    success = self.download_single_screensaver_image()
                    if success:
                        self.load_cached_images()  # 重新加载以包含新下载的图片
                        print("第一张屏保图片下载完成")
                    else:
                        print("下载第一张屏保图片失败")
            except Exception as e:
                print(f"初始化屏保图片失败: {e}")
        
        # 在后台线程中下载，避免阻塞UI
        threading.Thread(target=download_first_image, daemon=True).start()

    def set_window_icon(self, window):
        """为窗口设置图标"""
        print("开始设置窗口图标...")
        
        # 方法1: 直接使用iconbitmap设置
        try:
            if os.path.exists("app_icon.ico"):
                icon_path = os.path.abspath("app_icon.ico")
                print(f"找到图标文件: {icon_path}")
                window.iconbitmap(icon_path)
                print("✓ iconbitmap方法设置成功")
                
                # 强制刷新窗口
                window.update_idletasks()
                window.update()
                
                # 延迟后再次设置以确保生效
                def delayed_icon_set():
                    try:
                        window.iconbitmap(icon_path)
                        print("✓ 延迟iconbitmap设置成功")
                    except Exception as e:
                        print(f"延迟iconbitmap设置失败: {e}")
                
                window.after(100, delayed_icon_set)
                
            else:
                print("❌ 未找到app_icon.ico文件")
                return
                
        except Exception as e:
            print(f"❌ iconbitmap方法失败: {e}")
        
        # 方法2: 使用iconphoto作为补充
        try:
            if os.path.exists("app_icon.ico"):
                from PIL import Image, ImageTk
                icon_path = os.path.abspath("app_icon.ico")
                
                # 加载并调整图标
                img = Image.open(icon_path)
                
                # 为不同尺寸创建多个图标
                sizes = [16, 32, 48, 64]
                photos = []
                
                for size in sizes:
                    resized_img = img.resize((size, size), Image.Resampling.LANCZOS)
                    photo = ImageTk.PhotoImage(resized_img)
                    photos.append(photo)
                
                # 设置图标
                window.iconphoto(True, *photos)
                
                # 保存引用避免被垃圾回收
                window._icon_photos = photos
                print("✓ iconphoto方法设置成功")
                
        except Exception as e:
            print(f"❌ iconphoto方法失败: {e}")
        
        # 方法3: 设置窗口属性
        try:
            # 设置窗口类名
            window.tk.call('wm', 'class', window._w, "WallpaperDownloader")
            print("✓ 窗口类名设置成功")
        except Exception as e:
            print(f"❌ 窗口类名设置失败: {e}")
            
        print("图标设置完成")
    
    def setup_activity_monitoring(self):
        """设置活动监听"""
        # 绑定窗口事件来检测用户活动
        self.root.bind('<Motion>', self.on_user_activity)
        self.root.bind('<Button>', self.on_user_activity)
        self.root.bind('<Key>', self.on_user_activity)
        
        # 开始空闲检测
        self.start_idle_check()
    
    def on_user_activity(self, event=None):
        """用户活动回调"""
        self.last_activity_time = time.time()
        if self.screensaver_active:
            self.exit_screensaver()
    
    def start_idle_check(self):
        """开始空闲检测"""
        if self.idle_check_timer:
            self.root.after_cancel(self.idle_check_timer)
        
        if self.auto_screensaver_enabled:
            self.idle_check_timer = self.root.after(1000, self.check_idle_time)  # 每秒检查一次
    
    def check_idle_time(self):
        """检查空闲时间"""
        if self.auto_screensaver_enabled and not self.screensaver_active:
            idle_seconds = time.time() - self.last_activity_time
            idle_minutes = idle_seconds / 60
            
            if idle_minutes >= self.idle_time_minutes:
                self.start_screensaver()
                return
        
        # 继续检查
        if self.auto_screensaver_enabled:
            self.idle_check_timer = self.root.after(1000, self.check_idle_time)
    
    def toggle_auto_screensaver(self):
        """切换自动屏保状态"""
        self.auto_screensaver_enabled = not self.auto_screensaver_enabled
        self.save_config()
        
        if self.auto_screensaver_enabled:
            self.start_idle_check()
            # 确保使用最新的界面输入值
            try:
                current_time = int(self.idle_time_var.get())
                if current_time > 0:
                    self.idle_time_minutes = current_time
            except (ValueError, AttributeError):
                pass  # 使用现有值
            message = f"自动屏保已启用，{self.idle_time_minutes}分钟无操作后启动"
            self.update_label(message)
            self.root.after(50, lambda: self.force_update_label(message))
        else:
            if self.idle_check_timer:
                self.root.after_cancel(self.idle_check_timer)
                self.idle_check_timer = None
            self.update_label("自动屏保已禁用")
    
    def update_idle_time(self):
        """更新空闲时间设置"""
        try:
            new_time = int(self.idle_time_var.get())
            if new_time > 0:
                self.idle_time_minutes = new_time
                self.save_config()
                # 如果自动屏保已启用，更新提示信息
                if self.auto_screensaver_enabled:
                    message = f"自动屏保已启用，{self.idle_time_minutes}分钟无操作后启动"
                    self.update_label(message)
                    # 使用延迟确保消息不被覆盖
                    self.root.after(100, lambda: self.force_update_label(message))
                else:
                    message = f"空闲时间已设置为 {self.idle_time_minutes} 分钟"
                    self.update_label(message)
                    self.root.after(100, lambda: self.force_update_label(message))
            else:
                self.update_label("空闲时间必须大于0分钟")
        except ValueError:
            self.update_label("请输入有效的数字")



    def force_update_label(self, text):
        """强制更新标签，防止被其他逻辑覆盖"""
        if self.root.winfo_exists():
            self.label.config(text=text)

    def create_menu_bar(self):
        """创建菜单栏"""
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)
        
        # 文件菜单
        file_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="文件", menu=file_menu)
        file_menu.add_command(label="打开壁纸文件夹", command=self.open_wallpaper_folder)
        file_menu.add_command(label="更改壁纸文件夹", command=self.change_wallpaper_folder)
        file_menu.add_separator()
        file_menu.add_command(label="打开屏保文件夹", command=self.open_screensaver_folder)
        file_menu.add_command(label="更改屏保文件夹", command=self.change_screensaver_folder)
        file_menu.add_separator()
        file_menu.add_command(label="清理屏保缓存", command=self.clear_screensaver_cache)
        file_menu.add_separator()
        file_menu.add_command(label="退出", command=self.quit_app)
        
        # 工具菜单
        tools_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="运行", menu=tools_menu)
        tools_menu.add_command(label="查看信息推送内容", command=self.show_info_push)
        tools_menu.add_command(label="刷新信息推送数据", command=self.refresh_info_push)
        tools_menu.add_separator()
        tools_menu.add_command(label="启动屏保", command=self.start_screensaver)
        
        # 设置菜单
        settings_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="设置", menu=settings_menu)
        settings_menu.add_command(label="API Token设置", command=self.show_token_settings)
        settings_menu.add_separator()
        settings_menu.add_command(label="导出配置", command=self.export_config)
        settings_menu.add_command(label="导入配置", command=self.import_config)
        settings_menu.add_separator()
        
        # 创建开机启动的BooleanVar
        if not hasattr(self, 'startup_menu_var'):
            self.startup_menu_var = tk.BooleanVar()
            self.startup_menu_var.set(self.is_startup_enabled())
        
        settings_menu.add_checkbutton(label="开机启动", variable=self.startup_menu_var, 
                                    command=self.toggle_startup_from_menu)
        
        # 帮助菜单
        help_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="帮助", menu=help_menu)
        help_menu.add_command(label="关于", command=self.show_about)
        
    def show_token_settings(self):
        """显示API Token设置窗口"""
        token_window = tk.Toplevel(self.root)
        token_window.title("API Token设置")
        token_window.geometry("500x250")  # 增加高度从200到250
        token_window.resizable(False, False)
        
        # 窗口居中
        self.center_window(token_window, 500, 250)  # 更新居中参数
        
        # 设置窗口图标
        try:
            token_window.iconbitmap(self.icon_path)
        except:
            pass
            
        main_frame = ttk.Frame(token_window, padding=20)
        main_frame.pack(fill=BOTH, expand=YES)
        
        # 标题
        ttk.Label(main_frame, text="API Token设置", font=("Helvetica", 12, "bold")).pack(pady=(0, 15))
        
        # Token输入
        token_frame = ttk.Frame(main_frame)
        token_frame.pack(fill=X, pady=10)
        ttk.Label(token_frame, text="API Token:", font=("Helvetica", 10)).pack(anchor=W)
        token_entry = ttk.Entry(token_frame, width=50, show="*")
        token_entry.pack(fill=X, pady=(5, 0))
        token_entry.insert(0, self.api_token)
        
        # 说明文字
        ttk.Label(main_frame, text="注意：信息推送功能需要有效的API Token", 
                 font=("Helvetica", 9), bootstyle=SECONDARY).pack(pady=(5, 15))
        
        # 按钮
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(fill=X)
        
        def save_and_close():
            self.api_token = token_entry.get().strip()
            self.token_entry.delete(0, tk.END)
            self.token_entry.insert(0, self.api_token)
            self.save_token()
            token_window.destroy()
            
        def cancel():
            token_window.destroy()
            
        ttk.Button(button_frame, text="保存", command=save_and_close, bootstyle=SUCCESS).pack(side=RIGHT, padx=(5, 0))
        ttk.Button(button_frame, text="取消", command=cancel, bootstyle=SECONDARY).pack(side=RIGHT)
        
    def toggle_startup_from_menu(self):
        """从菜单切换开机启动状态"""
        current_status = self.is_startup_enabled()
        if current_status:
            self.disable_startup()
            self.show_center_messagebox_dialog("开机启动", "已禁用开机启动", "info")
        else:
            self.enable_startup()
            self.show_center_messagebox_dialog("开机启动", "已启用开机启动", "info")
        
        # 更新菜单复选框状态
        if hasattr(self, 'startup_menu_var'):
            self.startup_menu_var.set(self.is_startup_enabled())
        
        # 更新主界面的复选框状态（如果存在）
        if hasattr(self, 'startup_var'):
            self.startup_var.set(self.is_startup_enabled())
            
    def show_center_messagebox_dialog(self, title, message, msg_type="info", parent=None):
        """显示居中的消息对话框"""
        if parent is None:
            parent = self.root
            
        if msg_type == "info":
            import tkinter.messagebox as mb
            # 创建临时窗口来居中显示
            temp_window = tk.Toplevel(parent)
            temp_window.withdraw()  # 隐藏窗口
            temp_window.update_idletasks()
            
            # 居中显示
            self.center_window(temp_window, 300, 150)
            temp_window.deiconify()
            
            result = mb.showinfo(title, message, parent=temp_window)
            temp_window.destroy()
            return result
        elif msg_type == "warning":
            import tkinter.messagebox as mb
            temp_window = tk.Toplevel(parent)
            temp_window.withdraw()
            temp_window.update_idletasks()
            self.center_window(temp_window, 300, 150)
            temp_window.deiconify()
            result = mb.showwarning(title, message, parent=temp_window)
            temp_window.destroy()
            return result
        elif msg_type == "error":
            import tkinter.messagebox as mb
            temp_window = tk.Toplevel(parent)
            temp_window.withdraw()
            temp_window.update_idletasks()
            self.center_window(temp_window, 300, 150)
            temp_window.deiconify()
            result = mb.showerror(title, message, parent=temp_window)
            temp_window.destroy()
            return result
        elif msg_type == "yesno":
            import tkinter.messagebox as mb
            temp_window = tk.Toplevel(parent)
            temp_window.withdraw()
            temp_window.update_idletasks()
            self.center_window(temp_window, 300, 150)
            temp_window.deiconify()
            result = mb.askyesno(title, message, parent=temp_window)
            temp_window.destroy()
            return result

    def center_window(self, window, width, height):
        """将窗口居中显示"""
        # 获取屏幕尺寸
        screen_width = window.winfo_screenwidth()
        screen_height = window.winfo_screenheight()
        
        # 计算居中位置
        x = (screen_width - width) // 2
        y = (screen_height - height) // 2
        
        # 设置窗口位置
        window.geometry(f"{width}x{height}+{x}+{y}")

    def show_about(self):
        """显示关于对话框"""
        about_window = tk.Toplevel(self.root)
        about_window.title("关于")
        about_window.geometry("400x250")
        about_window.resizable(False, False)
        
        # 窗口居中
        self.center_window(about_window, 400, 250)
        
        # 设置窗口图标
        try:
            about_window.iconbitmap(self.icon_path)
        except:
            pass
            
        main_frame = ttk.Frame(about_window, padding=20)
        main_frame.pack(fill=BOTH, expand=YES)
        
        # 软件名称和版本
        ttk.Label(main_frame, text="魔力桌面助手", font=("Helvetica", 16, "bold"), bootstyle=PRIMARY).pack(pady=(10, 5))
        ttk.Label(main_frame, text="v3.0.0", font=("Helvetica", 12), bootstyle=INFO).pack(pady=(0, 20))
        
        # 免责声明
        disclaimer_text = """免责声明：

本软件仅供个人学习和交流使用，
使用本软件产生的任何问题，
开发者不承担任何责任。"""
        ttk.Label(main_frame, text=disclaimer_text, font=("Helvetica", 10), 
                 bootstyle=WARNING, justify=CENTER).pack(pady=(0, 20))
        
        # 关闭按钮
        ttk.Button(main_frame, text="确定", command=about_window.destroy, bootstyle=PRIMARY).pack()
        
        
    def quit_app(self):
        """退出应用程序"""
        if self.show_center_messagebox_dialog("确认退出", "确定要退出程序吗？", "yesno"):
            self.root.quit()
            self.root.destroy()

    def setup_ui(self):
        """设置用户界面"""
        # --- 创建菜单栏 ---
        self.create_menu_bar()
        
        # --- UI Setup ---
        main_frame = ttk.Frame(self.root, padding=15)
        main_frame.pack(fill=BOTH, expand=YES)

        self.label = ttk.Label(main_frame, text="请设置并启动功能", bootstyle=INFO)
        self.label.pack(pady=(0, 10))

        # --- Wallpaper Section ---
        wp_frame = ttk.Labelframe(main_frame, text="壁纸设置", padding=10)
        wp_frame.pack(fill=X, pady=5)

        wp_button_frame = ttk.Frame(wp_frame)
        wp_button_frame.pack(pady=5, fill=X)
        self.change_button = ttk.Button(wp_button_frame, text="更换壁纸", command=self.start_change_wallpaper_thread, bootstyle=SUCCESS)
        self.change_button.pack(side=LEFT, padx=(0, 5), expand=YES, fill=X)

        wp_auto_frame = ttk.Frame(wp_frame)
        wp_auto_frame.pack(pady=5, fill=X)
        self.auto_change_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(wp_auto_frame, text="自动更换", variable=self.auto_change_var, command=self.toggle_auto_change, bootstyle="round-toggle").pack(side=LEFT)
        ttk.Label(wp_auto_frame, text="间隔(分钟):").pack(side=LEFT, padx=(15, 5))
        self.wallpaper_interval_entry = ttk.Entry(wp_auto_frame, width=8)
        self.wallpaper_interval_entry.insert(0, "30")
        self.wallpaper_interval_entry.pack(side=LEFT, fill=X, expand=YES)

        # --- Screensaver Section ---
        ss_frame = ttk.Labelframe(main_frame, text="屏保设置", padding=10)
        ss_frame.pack(fill=X, pady=5)

        ss_interval_frame = ttk.Frame(ss_frame)
        ss_interval_frame.pack(pady=5, fill=X)
        ttk.Label(ss_interval_frame, text="切换间隔(分钟):").pack(side=LEFT)
        self.screensaver_interval_entry = ttk.Entry(ss_interval_frame, width=8)
        self.screensaver_interval_entry.insert(0, "1")
        self.screensaver_interval_entry.pack(side=LEFT, padx=5, fill=X, expand=YES)

        # 自动屏保设置
        ss_auto_frame = ttk.Frame(ss_frame)
        ss_auto_frame.pack(pady=5, fill=X)
        self.auto_screensaver_var = tk.BooleanVar(value=self.auto_screensaver_enabled)
        ttk.Checkbutton(ss_auto_frame, text="自动屏保", variable=self.auto_screensaver_var, command=self.toggle_auto_screensaver, bootstyle="round-toggle").pack(side=LEFT)
        ttk.Label(ss_auto_frame, text="空闲时间(分钟):").pack(side=LEFT, padx=(15, 5))
        self.idle_time_var = tk.StringVar(value=str(self.idle_time_minutes))
        self.idle_time_entry = ttk.Entry(ss_auto_frame, textvariable=self.idle_time_var, width=8)
        self.idle_time_entry.pack(side=LEFT, padx=5)
        ttk.Button(ss_auto_frame, text="应用", command=self.update_idle_time, bootstyle=INFO).pack(side=LEFT, padx=5)

        # --- Information Push Section ---
        info_frame = ttk.Labelframe(main_frame, text="信息推送", padding=10)
        info_frame.pack(fill=X, pady=5)

        # 服务选择区域
        services_frame = ttk.Frame(info_frame)
        services_frame.pack(fill=X, pady=5)
        
        # 创建多选框变量
        self.service_vars = {
            'daily_news': tk.BooleanVar(name='每日早报', value=True),
            'hitokoto': tk.BooleanVar(name='Hitokoto一言', value=True),
            'love_words': tk.BooleanVar(name='土味情话', value=True),
            'dog_diary': tk.BooleanVar(name='舔狗日记', value=True),
            'daily_article': tk.BooleanVar(name='每日一文', value=True)
        }
        
        # 服务名称映射
        self.service_names = {
            'daily_news': '每日早报',
            'hitokoto': 'Hitokoto一言',
            'love_words': '土味情话',
            'dog_diary': '舔狗日记',
            'daily_article': '每日一文'
        }
        
        # 创建两行多选框布局
        row1_frame = ttk.Frame(services_frame)
        row1_frame.pack(fill=X, pady=2)
        row2_frame = ttk.Frame(services_frame)
        row2_frame.pack(fill=X, pady=2)
        
        # 第一行：每日早报、Hitokoto一言、土味情话
        services_row1 = ['daily_news', 'hitokoto', 'love_words']
        for service in services_row1:
            ttk.Checkbutton(row1_frame, text=self.service_names[service], 
                           variable=self.service_vars[service], 
                           command=lambda s=service: self.on_service_toggle(s),
                           bootstyle="round-toggle").pack(side=LEFT, padx=10)
        
        # 第二行：舔狗日记、每日一文
        services_row2 = ['dog_diary', 'daily_article']
        for service in services_row2:
            ttk.Checkbutton(row2_frame, text=self.service_names[service], 
                           variable=self.service_vars[service], 
                           command=lambda s=service: self.on_service_toggle(s),
                           bootstyle="round-toggle").pack(side=LEFT, padx=10)

        # 按钮区域
        info_button_frame = ttk.Frame(info_frame)
        info_button_frame.pack(pady=5, fill=X)

        # 自动推送设置
        info_auto_frame = ttk.Frame(info_frame)
        info_auto_frame.pack(pady=5, fill=X)
        
        # 统一的信息自动推送
        self.auto_info_push_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(info_auto_frame, text="信息自动推送", variable=self.auto_info_push_var, command=self.toggle_auto_info_push, bootstyle="round-toggle").pack(side=LEFT)
        
        # 推送时间设置
        ttk.Label(info_auto_frame, text="推送时间:").pack(side=LEFT, padx=(20, 5))
        self.push_time_entry = ttk.Entry(info_auto_frame, width=8)
        self.push_time_entry.insert(0, "09:10")
        self.push_time_entry.pack(side=LEFT, padx=5)
        ttk.Label(info_auto_frame, text="(格式: HH:MM)", font=("Helvetica", 8), bootstyle=SECONDARY).pack(side=LEFT, padx=(5, 0))
        
        # 为了兼容性，保留原有的变量和时间输入框引用
        self.auto_news_var = self.auto_info_push_var  # 早报推送变量指向统一推送变量
        self.news_time_entry = self.push_time_entry

        # 默认开启：自动更换壁纸与信息自动推送
        try:
            if self.auto_change_var.get():
                self.toggle_auto_change()
            if self.auto_info_push_var.get():
                self.toggle_auto_info_push()
        except Exception as _e:
            print(f"初始化默认开关失败: {_e}")
        self.info_time_entry = self.push_time_entry

        # --- Calendar Reminder Section ---
        calendar_frame = ttk.Labelframe(main_frame, text="日历提醒", padding=10)
        calendar_frame.pack(fill=X, pady=5)

        calendar_button_frame = ttk.Frame(calendar_frame)
        calendar_button_frame.pack(pady=5, fill=X)
        
        ttk.Button(calendar_button_frame, text="打开日历", command=self.open_calendar_reminder, 
                  bootstyle=WARNING).pack(side=LEFT, padx=(0, 5), expand=YES, fill=X)
        
        # 日历说明
        calendar_info_frame = ttk.Frame(calendar_frame)
        calendar_info_frame.pack(fill=X, pady=2)
        ttk.Label(calendar_info_frame, text="点击日历可设置提醒事项，支持多种颜色分类和重复提醒", 
                 font=("Helvetica", 8), bootstyle=SECONDARY).pack(anchor=W)

        ss_button_frame = ttk.Frame(ss_frame)
        ss_button_frame.pack(pady=5, fill=X)
        self.screensaver_button = ttk.Button(ss_button_frame, text="启动屏保", command=self.start_screensaver, bootstyle=PRIMARY)
        self.screensaver_button.pack(side=LEFT, padx=(0, 5), expand=YES, fill=X)
        
        # --- System Tray & State ---
        self.root.protocol("WM_DELETE_WINDOW", self.hide_to_tray)
        self.tray_icon = None
        self.wallpaper_timer = None
        self.screensaver_timer = None
        
        # 初始化状态显示
        if self.auto_screensaver_enabled:
            self.update_label(f"自动屏保已启用，{self.idle_time_minutes}分钟无操作后启动")
        else:
            self.update_label("请设置并启动功能")
        
        # 确保UI输入框显示正确的值
        self.idle_time_var.set(str(self.idle_time_minutes))
        
        self.screensaver_window = None
        self.screensaver_images = []
        self.is_fetching = False

    def load_config(self):
        try:
            with open(CONFIG_PATH, 'r') as f:
                config = json.load(f)
            self.wallpaper_dir = config.get("wallpaper_dir", os.path.join(PICTURES_DIR, "Wallpapers"))
            self.screensaver_dir = config.get("screensaver_dir", os.path.join(PICTURES_DIR, "screensaver_images"))
            self.auto_screensaver_enabled = config.get("auto_screensaver_enabled", False)
            self.idle_time_minutes = config.get("idle_time_minutes", 5)
            self.api_token = config.get("api_token", "")  # 添加API Token配置
        except (FileNotFoundError, json.JSONDecodeError):
            self.wallpaper_dir = os.path.join(PICTURES_DIR, "Wallpapers")
            self.screensaver_dir = os.path.join(PICTURES_DIR, "screensaver_images")
            self.auto_screensaver_enabled = False
            self.idle_time_minutes = 5
            self.api_token = ""  # 默认为空
        os.makedirs(self.wallpaper_dir, exist_ok=True)
        os.makedirs(self.screensaver_dir, exist_ok=True)

    def save_config(self):
        try:
            # 确保配置目录存在
            os.makedirs(APP_DATA_DIR, exist_ok=True)
            
            config = {
                "wallpaper_dir": self.wallpaper_dir, 
                "screensaver_dir": self.screensaver_dir,
                "auto_screensaver_enabled": self.auto_screensaver_enabled,
                "idle_time_minutes": self.idle_time_minutes,
                "api_token": self.api_token  # 添加API Token保存
            }
            
            with open(CONFIG_PATH, 'w') as f: 
                json.dump(config, f, indent=4)
            print(f"配置已保存到: {CONFIG_PATH}")
            
        except Exception as e:
            print(f"保存配置失败: {e}")
            print(f"配置路径: {CONFIG_PATH}")
            print(f"APP_DATA_DIR: {APP_DATA_DIR}")

    def is_startup_enabled(self):
        """检查是否已启用开机启动"""
        try:
            import winreg
            key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, 
                               "Software\\Microsoft\\Windows\\CurrentVersion\\Run", 
                               0, winreg.KEY_READ)
            try:
                value, _ = winreg.QueryValueEx(key, "WallpaperDownloader")
                winreg.CloseKey(key)
                return True
            except FileNotFoundError:
                winreg.CloseKey(key)
                return False
        except Exception as e:
            print(f"检查开机启动状态失败: {e}")
            return False

    def set_startup(self, enable):
        """设置或取消开机启动"""
        try:
            import winreg
            key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, 
                               "Software\\Microsoft\\Windows\\CurrentVersion\\Run", 
                               0, winreg.KEY_SET_VALUE)
            
            if enable:
                # 获取当前程序的完整路径
                if getattr(sys, 'frozen', False):
                    # 如果是打包的exe文件
                    app_path = sys.executable
                else:
                    # 如果是Python脚本，使用python解释器运行
                    app_path = f'"{sys.executable}" "{os.path.abspath(__file__)}"'
                
                winreg.SetValueEx(key, "WallpaperDownloader", 0, winreg.REG_SZ, app_path)
                print(f"已添加开机启动: {app_path}")
            else:
                try:
                    winreg.DeleteValue(key, "WallpaperDownloader")
                    print("已取消开机启动")
                except FileNotFoundError:
                    print("开机启动项不存在")
            
            winreg.CloseKey(key)
            return True
            
        except Exception as e:
            print(f"设置开机启动失败: {e}")
            self.show_center_messagebox_dialog("错误", f"设置开机启动失败: {e}", "error")
            return False

    def toggle_startup(self):
        """切换开机启动状态"""
        enable = self.startup_var.get()
        success = self.set_startup(enable)
        
        if success:
            if enable:
                self.update_label("已启用开机启动")
            else:
                self.update_label("已禁用开机启动")
        else:
            # 如果设置失败，恢复复选框状态
            self.startup_var.set(not enable)

    def change_wallpaper_folder(self):
        parent_dir = filedialog.askdirectory(initialdir=os.path.dirname(self.wallpaper_dir), title="选择壁纸的上级文件夹")
        if parent_dir:
            self.wallpaper_dir = os.path.join(parent_dir, "Wallpapers")
            os.makedirs(self.wallpaper_dir, exist_ok=True)
            self.save_config()
            self.update_label(f"壁纸文件夹已设为: {self.wallpaper_dir}")

    def change_screensaver_folder(self):
        parent_dir = filedialog.askdirectory(initialdir=os.path.dirname(self.screensaver_dir), title="选择屏保的上级文件夹")
        if parent_dir:
            self.screensaver_dir = os.path.join(parent_dir, "screensaver_images")
            os.makedirs(self.screensaver_dir, exist_ok=True)
            self.save_config()
            self.update_label(f"屏保文件夹已设为: {self.screensaver_dir}")

    def manage_cache(self, directory):
        try:
            files = [os.path.join(directory, f) for f in os.listdir(directory) if f.lower().endswith(('.jpg', '.jpeg', '.png'))]
            if len(files) > MAX_CACHE_SIZE:
                files.sort(key=os.path.getmtime)
                for f in files[:len(files) - MAX_CACHE_SIZE]: os.remove(f)
        except Exception as e:
            print(f"Cache management failed for {directory}: {e}")

    def create_default_icon_in_appdata(self):
        if not os.path.exists(ICON_PATH):
            try:
                with open(ICON_PATH, "wb") as f:
                    f.write(ICON_DATA)
            except Exception as e:
                print(f"Could not create default icon: {e}")

    def get_tray_icon_image(self):
        """获取托盘图标图像，优先使用ICON_PATH，失败时创建默认图标"""
        try:
            # 首先尝试使用保存的图标文件
            if os.path.exists(ICON_PATH):
                return Image.open(ICON_PATH)
        except Exception:
            pass
        
        try:
            # 如果文件不存在或损坏，尝试从ICON_DATA创建
            return Image.open(io.BytesIO(ICON_DATA))
        except Exception:
            pass
        
        # 最后的备用方案：创建一个简单的默认图标
        try:
            img = Image.new('RGBA', (64, 64), (74, 144, 226, 255))
            # 绘制一个简单的图标
            from PIL import ImageDraw
            draw = ImageDraw.Draw(img)
            draw.ellipse([10, 10, 54, 54], fill=(255, 255, 255, 200))
            draw.text((20, 25), "WP", fill=(74, 144, 226, 255))
            return img
        except Exception:
            # 如果连这个都失败了，创建最基本的图标
            return Image.new('RGBA', (16, 16), (74, 144, 226, 255))

    def open_wallpaper_folder(self):
        try: subprocess.run(["explorer", os.path.realpath(self.wallpaper_dir)])
        except Exception as e: self.update_label(f"无法打开文件夹: {e}")

    def open_screensaver_folder(self):
        try: subprocess.run(["explorer", os.path.realpath(self.screensaver_dir)])
        except Exception as e: self.update_label(f"无法打开文件夹: {e}")

    def hide_to_tray(self):
        """隐藏到系统托盘"""
        try:
            self.root.withdraw()
            
            # 获取托盘图标
            image = self.get_tray_icon_image()
            
            # 创建托盘菜单
            menu = (
                pystray.MenuItem('显示窗口', self.show_from_tray, default=True), 
                pystray.MenuItem('退出', self.quit_app)
            )
            
            # 创建托盘图标
            self.tray_icon = pystray.Icon("wallpaper_app", image, "魔力桌面助手", menu)
            
            # 在单独线程中运行托盘图标
            self.tray_thread = threading.Thread(target=self.tray_icon.run, daemon=True)
            self.tray_thread.start()
            
        except Exception as e:
            print(f"托盘功能启动失败: {e}")
            # 如果托盘功能失败，至少不要让程序崩溃
            self.root.deiconify()  # 重新显示窗口

    def show_from_tray(self, icon=None, item=None):
        """从托盘显示窗口"""
        try:
            if self.tray_icon: 
                self.tray_icon.stop()
            self.root.after(0, self.root.deiconify)
        except Exception as e:
            print(f"从托盘显示窗口失败: {e}")

    def quit_app(self, icon=None, item=None):
        """退出应用程序"""
        try:
            if self.tray_icon: 
                self.tray_icon.stop()
            self.is_fetching = False
            if self.screensaver_window: 
                self.screensaver_window.destroy()
            
            # 释放互斥锁
            try:
                global app_mutex
                if app_mutex:
                    ctypes.windll.kernel32.CloseHandle(app_mutex)
            except Exception as e:
                print(f"释放互斥锁失败: {e}")
            
            self.root.quit()
        except Exception as e:
            print(f"退出应用程序时出错: {e}")
            # 强制退出
            import sys
            sys.exit(0)

    def get_wallpaper_interval_ms(self):
        try:
            minutes = float(self.wallpaper_interval_entry.get())
            return int(minutes * 60 * 1000) if minutes > 0 else None
        except (ValueError, TypeError): return None

    def get_screensaver_interval_ms(self):
        try:
            minutes = float(self.screensaver_interval_entry.get())
            return int(minutes * 60 * 1000) if minutes > 0 else None
        except (ValueError, TypeError): return None

    def update_label(self, text):
        if self.root.winfo_exists(): self.label.config(text=text)

    def get_high_res_image(self):
        try: 
            # 使用支持随机索引的必应壁纸API，确保每次获取不同的壁纸
            response = requests.get("https://bingw.jasonzeng.dev/?resolution=UHD&index=random", timeout=20)
            return response.content
        except requests.RequestException: return None

    def set_wallpaper(self, image_path):
        try:
            ctypes.windll.user32.SystemParametersInfoW(20, 0, image_path, 3)
            self.update_label("壁纸更换成功！")
        except Exception as e: self.update_label(f"设置壁纸失败: {e}")

    def change_wallpaper_logic(self):
        self.update_label("正在下载高清壁纸...")
        image_data = self.get_high_res_image()
        if not image_data:
            self.update_label("下载壁纸失败，请检查网络"); return
        try:
            Image.open(io.BytesIO(image_data))
            new_wallpaper_path = os.path.join(self.wallpaper_dir, f"wallpaper_{int(time.time())}.jpg")
            with open(new_wallpaper_path, "wb") as f: f.write(image_data)
            self.set_wallpaper(new_wallpaper_path)
            self.manage_cache(self.wallpaper_dir)
        except (IOError, OSError) as e: self.update_label(f"保存壁纸失败: {e}")
        except Exception: self.update_label("下载的图片文件无效")

    def start_change_wallpaper_thread(self):
        self.change_button.config(state=DISABLED)
        threading.Thread(target=self._threaded_change_and_reenable, daemon=True).start()

    def _threaded_change_and_reenable(self):
        self.change_wallpaper_logic()
        if self.root.winfo_exists(): self.root.after(0, self.change_button.config, {'state': NORMAL})

    def toggle_auto_change(self):
        if self.auto_change_var.get():
            if self.get_wallpaper_interval_ms():
                self.update_label("已开启自动更换壁纸")
                self.schedule_next_wallpaper_change()
            else:
                self.update_label("请输入有效的壁纸间隔时间"); self.auto_change_var.set(False)
        else:
            if self.wallpaper_timer: self.root.after_cancel(self.wallpaper_timer)
            self.update_label("已关闭自动更换壁纸")

    def schedule_next_wallpaper_change(self):
        interval = self.get_wallpaper_interval_ms()
        if interval and self.auto_change_var.get():
            self.wallpaper_timer = self.root.after(interval, self.run_scheduled_wallpaper_change)

    def run_scheduled_wallpaper_change(self):
        if self.auto_change_var.get():
            self.start_change_wallpaper_thread(); self.schedule_next_wallpaper_change()

    def clear_screensaver_cache(self):
        if self.show_center_messagebox_dialog("确认", f"确定要删除 {self.screensaver_dir} 内的所有图片吗？", "yesno"):
            try:
                for f in os.listdir(self.screensaver_dir): os.remove(os.path.join(self.screensaver_dir, f))
                self.screensaver_images.clear(); self.update_label("屏保缓存已清理")
            except Exception as e: self.update_label(f"清理缓存失败: {e}")

    def start_screensaver(self):
        if self.screensaver_window: return
        self.screensaver_active = True  # 设置屏保激活状态
        self.screensaver_window = ttk.Toplevel(self.root)
        self.screensaver_window.attributes("-fullscreen", True)
        self.screensaver_window.configure(bg='black')
        self.screensaver_window.bind("<Key>", self.exit_screensaver)
        self.screensaver_window.bind("<Motion>", self.exit_screensaver)
        self.screensaver_window.bind("<Button-1>", self.exit_screensaver)  # 鼠标点击退出
        self.ss_label = ttk.Label(self.screensaver_window, background='black', foreground='white', text="正在加载图片...", font=("Arial", 24))
        self.ss_label.pack(expand=YES, fill=BOTH); self.ss_label.focus_set()
        self.load_cached_images()
        if self.screensaver_images: 
            self.update_screensaver_image()
        else: 
            self.wait_for_first_image()
        # 启动智能预加载机制
        self.schedule_preload_next_image()

    def wait_for_first_image(self):
        if not self.screensaver_window: return
        if self.screensaver_images: 
            self.update_screensaver_image()
        else: 
            # 如果没有图片，启动下载并继续等待
            threading.Thread(target=self.download_single_screensaver_image, daemon=True).start()
            self.screensaver_timer = self.screensaver_window.after(1000, self.wait_for_first_image)

    def load_cached_images(self):
        try:
            # 获取所有图片文件
            image_files = [os.path.join(self.screensaver_dir, f) for f in os.listdir(self.screensaver_dir) if f.lower().endswith(('.png', '.jpg', '.jpeg'))]
            valid_images = []
            
            # 验证每个图片文件的有效性
            for image_path in image_files:
                try:
                    with Image.open(image_path) as img:
                        # 检查图片是否有效（尺寸大于100x100）
                        if img.width > 100 and img.height > 100:
                            valid_images.append(image_path)
                        else:
                            # 删除无效图片
                            os.remove(image_path)
                            print(f"删除无效图片: {image_path}")
                except Exception:
                    # 删除损坏的图片文件
                    try:
                        os.remove(image_path)
                        print(f"删除损坏图片: {image_path}")
                    except:
                        pass
            
            self.screensaver_images = valid_images
            # 按文件名排序以确保一致的顺序
            self.screensaver_images.sort()
            # 重置已使用图片记录
            self.used_images.clear()
        except FileNotFoundError: 
            self.screensaver_images = []
            self.used_images.clear()

    def schedule_preload_next_image(self):
        """初始化时启动预加载机制"""
        if not self.screensaver_window: return
        interval = self.get_screensaver_interval_ms() or 60000
        # 在切换间隔的75%时开始预加载下一张图片
        preload_delay = int(interval * 0.75)
        self.screensaver_window.after(preload_delay, self.preload_next_image)

    def preload_next_image(self):
        """智能预加载下一张屏保图片"""
        if not self.screensaver_window: return
        
        # 检查是否需要下载新图片
        # 如果当前图片快用完了，或者缓存图片少于3张，就下载新图片
        unused_count = len(self.screensaver_images) - len(self.used_images)
        if unused_count <= 1 or len(self.screensaver_images) < 3:
            threading.Thread(target=self.download_single_screensaver_image, daemon=True).start()

    def download_single_screensaver_image(self):
        """下载单张屏保图片"""
        try:
            image_data = self.get_high_res_image()
            if image_data and len(image_data) > 1000:  # 确保数据不为空且有足够大小
                # 验证图片格式并检查图片是否有效
                img = Image.open(io.BytesIO(image_data))
                # 检查图片尺寸，确保不是无效图片
                if img.width > 100 and img.height > 100:
                    path = os.path.join(self.screensaver_dir, f"ss_{int(time.time() * 1000)}.jpg")
                    with open(path, 'wb') as f: 
                        f.write(image_data)
                    if path not in self.screensaver_images: 
                        self.screensaver_images.append(path)
                    self.manage_cache(self.screensaver_dir)
                    return True  # 表示下载成功
        except Exception as e:
            print(f"下载屏保图片失败: {e}")
        return False  # 表示下载失败

    def resize_and_crop(self, img, target_width, target_height):
        img_ratio = img.width / img.height; target_ratio = target_width / target_height
        if target_ratio > img_ratio:
            new_height = int(target_width / img_ratio)
            img = img.resize((target_width, new_height), Image.Resampling.LANCZOS)
            crop_y = (new_height - target_height) // 2
            return img.crop((0, crop_y, target_width, crop_y + target_height))
        else:
            new_width = int(target_height * img_ratio)
            img = img.resize((new_width, target_height), Image.Resampling.LANCZOS)
            crop_x = (new_width - target_width) // 2
            return img.crop((crop_x, 0, crop_x + target_width, target_height))

    def update_screensaver_image(self):
        if not self.screensaver_window: return
        
        # 如果没有图片或当前图片已全部使用，开始新一轮
        if not self.screensaver_images or len(self.used_images) >= len(self.screensaver_images):
            self.used_images.clear()
            if not self.screensaver_images:
                # 没有图片时，下载一张新的
                threading.Thread(target=self.download_single_screensaver_image, daemon=True).start()
                self.screensaver_timer = self.screensaver_window.after(1000, self.update_screensaver_image)
                return
        
        try:
            # 选择下一张未使用的图片
            available_images = [img for img in self.screensaver_images if img not in self.used_images]
            if not available_images:
                # 如果没有可用图片，清空已使用列表并重新开始
                self.used_images.clear()
                available_images = self.screensaver_images
            
            path = available_images[0] if available_images else None
            if not path:
                self.screensaver_timer = self.screensaver_window.after(1000, self.update_screensaver_image)
                return
                
            self.used_images.add(path)
            
            w, h = self.screensaver_window.winfo_width(), self.screensaver_window.winfo_height()
            if w <= 1 or h <= 1: 
                self.screensaver_window.after(100, self.update_screensaver_image)
                return
                
            img = self.resize_and_crop(Image.open(path), w, h)
            tk_img = ImageTk.PhotoImage(img)
            self.ss_label.config(image=tk_img, text="")
            self.ss_label.image = tk_img
        except Exception:
            if 'path' in locals() and path in self.screensaver_images: 
                self.screensaver_images.remove(path)
            try: 
                os.remove(path)
            except OSError: 
                pass
                
        interval = self.get_screensaver_interval_ms() or 60000
        self.screensaver_timer = self.screensaver_window.after(interval, self.update_screensaver_image)
        
        # 智能预加载：在切换间隔的75%时开始预加载下一张图片
        preload_delay = int(interval * 0.75)
        self.screensaver_window.after(preload_delay, self.preload_next_image)

    def exit_screensaver(self, event=None):
        if self.screensaver_window:
            self.screensaver_active = False  # 重置屏保状态
            if self.screensaver_timer: self.screensaver_window.after_cancel(self.screensaver_timer)
            self.screensaver_window.destroy()
            self.screensaver_window = None
            self.last_activity_time = time.time()  # 重置活动时间
            # 重置图片使用状态，下次启动屏保时从头开始
            self.used_images.clear()
            self.update_label("屏保已退出")

    # --- Daily News Functions ---
    def show_daily_news(self):
        """显示每日早报窗口"""
        try:
            if self.daily_news_window is None:
                self.daily_news_window = DailyNewsWindow(self.root, self.daily_news_manager)
                self.daily_news_window.show_news_window()
            else:
                # 检查窗口是否还存在
                try:
                    if self.daily_news_window.window.winfo_exists():
                        self.daily_news_window.window.lift()
                        self.daily_news_window.window.focus_force()
                    else:
                        # 窗口已被关闭，重新创建
                        self.daily_news_window = DailyNewsWindow(self.root, self.daily_news_manager)
                        self.daily_news_window.show_news_window()
                except tk.TclError:
                    # 窗口已被销毁，重新创建
                    self.daily_news_window = DailyNewsWindow(self.root, self.daily_news_manager)
                    self.daily_news_window.show_news_window()
        except Exception as e:
            self.show_center_messagebox_dialog("错误", f"打开早报窗口失败: {str(e)}", "error")

    def refresh_daily_news(self):
        """刷新早报数据"""
        def refresh_thread():
            try:
                self.daily_news_manager.fetch_news(force_refresh=True)
                self.root.after(0, lambda: self.update_label("早报数据已刷新"))
                if self.daily_news_window and self.daily_news_window.window.winfo_exists():
                    self.daily_news_window.refresh_news()
            except Exception as e:
                self.root.after(0, lambda: self.update_label(f"刷新早报失败: {str(e)}"))
        
        threading.Thread(target=refresh_thread, daemon=True).start()
        self.update_label("正在刷新早报数据...")

    def toggle_auto_news(self):
        """切换自动推送早报功能（兼容性方法，实际调用统一推送方法）"""
        self.toggle_auto_info_push()

    def start_news_timer(self):
        """启动早报定时器"""
        self.stop_news_timer()  # 先停止现有定时器
        
        def check_time():
            try:
                push_time = self.news_time_entry.get().strip()
                if not push_time:
                    return
                
                # 解析时间格式 HH:MM
                hour, minute = map(int, push_time.split(':'))
                current_time = time.localtime()
                current_hour = current_time.tm_hour
                current_minute = current_time.tm_min
                
                # 检查是否到了推送时间
                if current_hour == hour and current_minute == minute:
                    self.show_daily_news_notification()
                
            except Exception as e:
                print(f"检查早报推送时间失败: {e}")
            
            # 每分钟检查一次
            if self.auto_news_var.get():
                self.news_timer = self.root.after(60000, check_time)
        
        check_time()

    def stop_news_timer(self):
        """停止早报定时器"""
        if self.news_timer:
            self.root.after_cancel(self.news_timer)
            self.news_timer = None

    def show_daily_news_notification(self):
        """显示早报推送通知"""
        try:
            news_data = self.daily_news_manager.get_cached_news()
            if news_data and news_data.get('news'):
                # 显示早报窗口
                self.show_daily_news()
                
                # 显示系统通知
                if hasattr(self, 'tray_icon') and self.tray_icon:
                    self.tray_icon.notify("每日早报", "今日早报已更新，点击查看详情")
                else:
                    self.show_center_messagebox_dialog("每日早报", "今日早报已更新！", "info")
            else:
                # 如果没有缓存数据，尝试获取
                self.refresh_daily_news()
                # 获取后再次尝试显示
                news_data = self.daily_news_manager.get_cached_news()
                if news_data and news_data.get('news'):
                    self.show_daily_news()
                    if hasattr(self, 'tray_icon') and self.tray_icon:
                        self.tray_icon.notify("每日早报", "今日早报已更新，点击查看详情")
                    else:
                        self.show_center_messagebox_dialog("每日早报", "今日早报已更新！", "info")
        except Exception as e:
            print(f"显示早报通知失败: {e}")

    def show_integrated_features(self):
        """显示集成功能窗口（日历天气）"""
        try:
            if not hasattr(self, 'integrated_features_window') or self.integrated_features_window is None:
                self.integrated_features_window = IntegratedFeaturesWindow(self.root, self.integrated_features_manager)
            self.integrated_features_window.show()
        except Exception as e:
            messagebox.showerror("错误", f"显示集成功能失败: {e}", parent=self.root)

    def show_poetry_image(self):
        """显示一诗一图功能"""
        try:
            if not hasattr(self, 'integrated_features_window') or self.integrated_features_window is None:
                self.integrated_features_window = IntegratedFeaturesWindow(self.root, self.integrated_features_manager)
            self.integrated_features_window.show_poetry_tab()
        except Exception as e:
            messagebox.showerror("错误", f"显示一诗一图失败: {e}", parent=self.root)

    def refresh_integrated_data(self):
        """刷新集成功能数据"""
        try:
            # 在后台线程中刷新数据
            def refresh_thread():
                self.integrated_features_manager.clear_cache()
                if hasattr(self, 'integrated_features_window') and self.integrated_features_window:
                    self.integrated_features_window.refresh_all_data()
            
            threading.Thread(target=refresh_thread, daemon=True).start()
            show_center_messagebox("提示", "正在刷新数据，请稍候...")
        except Exception as e:
            messagebox.showerror("错误", f"刷新数据失败: {e}", parent=self.root)

    def on_service_toggle(self, service_key):
        """处理服务选择状态变化"""
        try:
            # 这里可以添加服务选择状态变化时的逻辑
            # 例如：保存配置、更新UI等
            pass
        except Exception as e:
            print(f"服务切换失败: {e}")

    def show_info_push(self):
        """显示信息推送窗口"""
        try:
            # 检查Token是否已设置
            if not self.check_token_required():
                return
            
            # 获取选中的服务
            selected_services = []
            for service_name, var in self.service_vars.items():
                if var.get():
                    selected_services.append(service_name)
            
            if not selected_services:
                show_center_messagebox("提示", "请先选择要查看的服务", "warning")
                return
            
            # 创建或显示ALAPI窗口
            if not hasattr(self, 'alapi_window') or self.alapi_window is None:
                self.alapi_window = ALAPIWindow(self.root, self.alapi_manager)
            
            self.alapi_window.show_services(selected_services)
        except Exception as e:
            messagebox.showerror("错误", f"显示信息推送失败: {e}", parent=self.root)

    def refresh_info_push(self):
        """刷新信息推送数据"""
        try:
            # 检查Token是否已设置
            if not self.check_token_required():
                return
            
            # 获取选中的服务
            selected_services = []
            for service_name, var in self.service_vars.items():
                if var.get():
                    selected_services.append(service_name)
            
            if not selected_services:
                show_center_messagebox("提示", "请先选择要刷新的服务", "warning")
                return
            
            # 在后台线程中刷新数据
            def refresh_thread():
                for service in selected_services:
                    self.alapi_manager.clear_cache(service)
                
                if hasattr(self, 'alapi_window') and self.alapi_window:
                    self.alapi_window.refresh_services(selected_services)
            
            threading.Thread(target=refresh_thread, daemon=True).start()
            show_center_messagebox("提示", "正在刷新数据，请稍候...")
        except Exception as e:
            messagebox.showerror("错误", f"刷新数据失败: {e}", parent=self.root)

    def toggle_auto_info_push(self):
        """切换自动信息推送"""
        try:
            if self.auto_info_push_var.get():
                # 检查Token是否已设置
                if not self.check_token_required():
                    self.auto_info_push_var.set(False)  # 重置复选框状态
                    return
                
                # 启动信息推送定时器（仅统一信息推送，不再单独启动早报定时器）
                self.start_info_push_timer()
            else:
                # 停止信息推送定时器（不再使用早报定时器）
                self.stop_info_push_timer()
        except Exception as e:
            messagebox.showerror("错误", f"切换信息自动推送失败: {e}", parent=self.root)

    def start_info_push_timer(self):
        """启动信息推送定时器（按用户设定HH:MM每分钟检查）"""
        try:
            if hasattr(self, 'info_push_timer') and self.info_push_timer:
                self.root.after_cancel(self.info_push_timer)
                self.info_push_timer = None
            
            def check_push_time():
                try:
                    push_time = self.info_time_entry.get().strip() if hasattr(self, 'info_time_entry') else None
                    if not push_time:
                        push_time = "08:00"
                    hour, minute = map(int, push_time.split(":"))
                    current_time = time.localtime()
                    current_hour = current_time.tm_hour
                    current_minute = current_time.tm_min
                    current_tag = (current_hour, current_minute)
                    
                    # 到达设定时间，且未在本分钟推送
                    if current_hour == hour and current_minute == minute and self.last_info_push_minute != current_tag:
                        self.last_info_push_minute = current_tag
                        self.show_info_push_notification()
                except Exception as e:
                    print(f"检查信息推送时间失败: {e}")
                
                if self.auto_info_push_var.get():
                    self.info_push_timer = self.root.after(60000, check_push_time)
            
            check_push_time()
        except Exception as e:
            print(f"启动信息推送定时器失败: {e}")

    def stop_info_push_timer(self):
        """停止信息推送定时器"""
        try:
            if hasattr(self, 'info_push_timer') and self.info_push_timer:
                self.root.after_cancel(self.info_push_timer)
                self.info_push_timer = None
        except Exception as e:
            print(f"停止信息推送定时器失败: {e}")

    def show_info_push_notification(self):
        """显示信息推送通知"""
        try:
            # 获取选中的服务（修复：应从 service_vars 读取）
            selected_services = []
            for service_name, var in self.service_vars.items():
                if var.get():
                    selected_services.append(service_name)
            
            if selected_services:
                # 直接显示信息推送窗口（取消提示弹窗）
                self.show_info_push()
            
            # 重新启动定时器
            if self.auto_info_push_var.get():
                self.start_info_push_timer()
        except Exception as e:
            print(f"显示信息推送通知失败: {e}")
            # 重新启动定时器
            if self.auto_info_push_var.get():
                self.start_info_push_timer()

    def save_token(self):
        """保存API Token"""
        try:
            token = self.token_entry.get().strip()
            if not token:
                show_center_messagebox("警告", "请输入有效的API Token", "warning")
                return
            
            self.api_token = token
            self.save_config()
            show_center_messagebox("提示", "API Token已保存")
            print(f"Token保存成功: {token[:10]}...")  # 添加日志输出
            
        except Exception as e:
            print(f"保存Token时发生错误: {e}")  # 添加错误日志
            messagebox.showerror("错误", f"保存Token失败: {e}", parent=self.root)

    def check_token_required(self):
        """检查是否需要设置Token"""
        try:
            if not self.api_token.strip():
                show_center_messagebox("提示", "请先设置API Token才能使用信息推送功能", "warning")
                return False
            return True
        except Exception as e:
            print(f"检查Token时发生错误: {e}")  # 添加错误日志
            messagebox.showerror("错误", f"检查Token失败: {str(e)}", parent=self.root)
            return False

    def collect_all_config(self):
        """收集所有配置信息"""
        try:
            config_data = {
                "export_info": {
                    "export_time": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    "app_version": "魔力桌面助手 v2.0",
                    "config_version": "1.0"
                },
                "main_config": {
                    "wallpaper_dir": self.wallpaper_dir,
                    "screensaver_dir": self.screensaver_dir,
                    "auto_screensaver_enabled": self.auto_screensaver_enabled,
                    "idle_time_minutes": self.idle_time_minutes,
                    "api_token": self.api_token
                },
                "calendar_reminders": [],
                "daily_news_config": {},
                "alapi_config": {},
                "integrated_features_config": {}
            }
            
            # 收集日历提醒数据
            if hasattr(self, 'calendar_reminder_manager') and self.calendar_reminder_manager:
                reminders_data = []
                for reminder in self.calendar_reminder_manager.reminders.values():
                    reminders_data.append(reminder.to_dict())
                config_data["calendar_reminders"] = reminders_data
            
            # 收集每日新闻配置
            if hasattr(self, 'daily_news_manager') and self.daily_news_manager:
                config_data["daily_news_config"] = {
                    "current_source": self.daily_news_manager.current_source,
                    "notification_enabled": self.daily_news_manager.notification_enabled,
                    "notification_time": self.daily_news_manager.notification_time,
                    "api_sources": self.daily_news_manager.api_sources
                }
            
            # 收集ALAPI配置
            if hasattr(self, 'alapi_manager') and self.alapi_manager:
                config_data["alapi_config"] = {
                    "token": self.alapi_manager.get_token()
                }
            
            # 收集集成功能配置
            if hasattr(self, 'integrated_features_manager') and self.integrated_features_manager:
                config_data["integrated_features_config"] = {
                    "alapi_token": self.integrated_features_manager.alapi_token,
                    "city": self.integrated_features_manager.city,
                    "sentence_token": self.integrated_features_manager.sentence_token,
                    "zhipu_api_key": self.integrated_features_manager.zhipu_api_key
                }
            
            return config_data
        except Exception as e:
            print(f"收集配置信息失败: {e}")
            return None

    def export_config(self):
        """导出配置到JSON文件"""
        try:
            # 收集所有配置数据
            config_data = self.collect_all_config()
            if not config_data:
                messagebox.showerror("错误", "收集配置信息失败", parent=self.root)
                return
            
            # 生成文件名（使用当前日期）
            current_date = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"魔力桌面助手配置_{current_date}.json"
            
            # 选择保存路径
            from tkinter import filedialog
            filepath = filedialog.asksaveasfilename(
                title="导出配置文件",
                defaultextension=".json",
                filetypes=[("JSON文件", "*.json"), ("所有文件", "*.*")],
                initialfile=filename,
                parent=self.root
            )
            
            if filepath:
                # 保存配置文件
                with open(filepath, 'w', encoding='utf-8') as f:
                    json.dump(config_data, f, ensure_ascii=False, indent=2)
                
                messagebox.showinfo("成功", f"配置已导出到：\n{filepath}", parent=self.root)
            
        except Exception as e:
            messagebox.showerror("错误", f"导出配置失败：{str(e)}", parent=self.root)

    def import_config(self):
        """从JSON文件导入配置"""
        try:
            # 选择导入文件
            from tkinter import filedialog
            filepath = filedialog.askopenfilename(
                title="选择配置文件",
                filetypes=[("JSON文件", "*.json"), ("所有文件", "*.*")],
                parent=self.root
            )
            
            if not filepath:
                return
            
            # 确认导入操作
            confirm = messagebox.askyesno(
                "确认导入", 
                "导入配置将覆盖当前所有设置和日历提醒数据，是否继续？",
                parent=self.root
            )
            if not confirm:
                return
            
            # 读取配置文件
            with open(filepath, 'r', encoding='utf-8') as f:
                config_data = json.load(f)
            
            # 恢复配置
            self.restore_config(config_data)
            
            messagebox.showinfo("成功", "配置导入成功！请重启应用以应用所有设置。", parent=self.root)
            
        except Exception as e:
            messagebox.showerror("错误", f"导入配置失败：{str(e)}", parent=self.root)

    def restore_config(self, config_data):
        """恢复配置数据"""
        try:
            # 恢复主配置
            if "main_config" in config_data:
                main_config = config_data["main_config"]
                self.wallpaper_dir = main_config.get("wallpaper_dir", self.wallpaper_dir)
                self.screensaver_dir = main_config.get("screensaver_dir", self.screensaver_dir)
                self.auto_screensaver_enabled = main_config.get("auto_screensaver_enabled", self.auto_screensaver_enabled)
                self.idle_time_minutes = main_config.get("idle_time_minutes", self.idle_time_minutes)
                self.api_token = main_config.get("api_token", self.api_token)
                
                # 保存主配置
                self.save_config()
            
            # 恢复日历提醒数据
            if "calendar_reminders" in config_data and hasattr(self, 'calendar_reminder_manager'):
                self.calendar_reminder_manager.reminders.clear()
                for reminder_data in config_data["calendar_reminders"]:
                    from calendar_reminder import ReminderData
                    reminder = ReminderData.from_dict(reminder_data)
                    self.calendar_reminder_manager.reminders[reminder.id] = reminder
                self.calendar_reminder_manager.save_reminders()
            
            # 恢复每日新闻配置
            if "daily_news_config" in config_data and hasattr(self, 'daily_news_manager'):
                news_config = config_data["daily_news_config"]
                self.daily_news_manager.current_source = news_config.get("current_source", "alapi")
                self.daily_news_manager.notification_enabled = news_config.get("notification_enabled", True)
                self.daily_news_manager.notification_time = news_config.get("notification_time", "08:00")
                if "api_sources" in news_config:
                    self.daily_news_manager.api_sources = news_config["api_sources"]
                self.daily_news_manager.save_cache()
            
            # 恢复ALAPI配置
            if "alapi_config" in config_data and hasattr(self, 'alapi_manager'):
                alapi_config = config_data["alapi_config"]
                token = alapi_config.get("token", "")
                if token:
                    self.alapi_manager.set_token(token)
            
            # 恢复集成功能配置
            if "integrated_features_config" in config_data and hasattr(self, 'integrated_features_manager'):
                features_config = config_data["integrated_features_config"]
                self.integrated_features_manager.alapi_token = features_config.get("alapi_token", "")
                self.integrated_features_manager.city = features_config.get("city", "北京")
                self.integrated_features_manager.sentence_token = features_config.get("sentence_token", "")
                self.integrated_features_manager.zhipu_api_key = features_config.get("zhipu_api_key", "")
            
            print("配置恢复完成")
            
        except Exception as e:
            print(f"恢复配置失败: {e}")
            raise

    def open_calendar_reminder(self):
        """打开日历提醒窗口"""
        try:
            if self.calendar_reminder_window is None or not self.calendar_reminder_window.window.winfo_exists():
                self.calendar_reminder_window = CalendarReminderWindow(self.root, self.calendar_reminder_manager)
            else:
                # 如果窗口已存在，将其置前
                self.calendar_reminder_window.window.lift()
                self.calendar_reminder_window.window.focus_force()
        except Exception as e:
            messagebox.showerror("错误", f"打开日历提醒失败: {str(e)}", parent=self.root)

if __name__ == "__main__":
    root = ttk.Window(themename="litera")
    app = WallpaperApp(root)
    root.mainloop()